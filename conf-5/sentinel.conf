################################## GENERAL ####################################

#* redis.conf 와 동일
bind 0.0.0.0
protected-mode yes

#* default 값 +20000
port 26379

#* systemd 및 notify 사용으로 no로 동작해 보자?
daemonize no

#* 표준 설정 및 메뉴얼에는 없으나 systemd로 동작하기 위해서는 필요함.
supervised systemd

# daemonized, Redis Sentinel pid 저장 파일
pidfile /var/run/sentinel/sentinel.pid

logfile /var/log/sentinel/sentinel.log

#* NAT 환경에서 사용
# sentinel announce-ip <ip>
# sentinel announce-port <port>


# dir <working-directory>
# Every long running process should have a well-defined working directory.
# For Redis Sentinel to chdir to /tmp at startup is the simplest thing
# for the process to don't interfere with administrative tasks such as
# unmounting filesystems.
dir /tmp



################################ 모니터링 ####################################

#* sentinel이 모니터링할 master 등록 (다수 등록 가능)
#* master를 통해 slave의 정보를 획득
#* quorum은 홀수로 구성된 sentinel의 과반이 넘도록 해야 한다. (3->2, 5->3)
# Note: master name should not include special characters or spaces.
# The valid charset is A-z 0-9 and the three characters ".-_".
# sentinel monitor <master-name> <ip> <redis-port> <quorum>
sentinel monitor master-name 127.0.0.1 6379 2

#* 모니터링하는 master에 requirepass가 등록된 경우 여기에도 반영
#* master와 replica는 동일 requirepass 값을 가져야 함(없거나, 일다면 동일)
# sentinel auth-pass <master-name> <password>



#* sentinel이 master, replica, 다른 sentinel에 PING을 보내고 응답이 없을때,
#* down으로 간주하는 time-out 시간
# Default is 30 seconds.
# sentinel down-after-milliseconds <master-name> <milliseconds>
sentinel down-after-milliseconds master-name 10000

#* failover 후  새 master가 복제를 동시에 몇 대의 replica에게 할지 결정
#* sentinel이 replica에게 replicaof 명령어 하달
#* 1이면 1대씩 순차적으로 진행
# sentinel parallel-syncs <master-name> <numreplicas>
sentinel parallel-syncs master-name 1


#* 6단계로 failover 및 장애조치 완료함.
#* 새 master가 선정되었지만, client(redis 사용자)에게는 어떻게 새 master로
#* seamless 하게 연결할지가 관건. 이것이 숙제인 7단계임.

# http://redisgate.kr/redis/sentinel/sentinel_failover-timeout.php
# failover_state_change_time을 세팅하는 단계
# 1단계: 객관적 다운(odown)
# 2단계: 센티널 리더 선출(elected-leader)
# 3단계: 슬레이브 선정(selected-slave)
# 4단계: 선정된 슬레이브 마스터로 승격(promoted-slave)
# 5단계: 슬레이브들이 새 마스터에서 데이터를 받도록 SLAVEOF 명령 수행(slave-reconf-done)
# 6단계: 센티널 내 정보 갱신(failover-end, switch-master, update_config)

# sentinel failover-timeout <master-name> <milliseconds>
# Default is 3 minutes.
sentinel failover-timeout master-name 180000


############################## 알람 및 Noti. ####################################

#* sentinel에서 알람 메시지를 지정된 shell script를 통해 전달한다.
#* shell를 통해 전달 받은 arguments 값을 활용하여 관리자 또는 고객에게 noti.가 가능하게 된다.
#* http://redisgate.kr/redis/sentinel/sentinel_notification.php
# sentinel notification-script <master-name> <script-path>



#* 새 master가 선정되었을 때, 바뀐 ip/port를 클라이언트 사이드에 통보할 수 있게 한다.
#* 여기서도 전달 방법은 사전 정의된 shell script 구동이다.
#* master의 접근 주소가 바귀면 안되기 때문에 해당기능은 관리하는 클라우드 사업자만 받아야 한다.
# <master-name> <role> <state> <from-ip> <from-port> <to-ip> <to-port>
# <state> is currently always "failover"
# <role> is either "leader" or "observer"
# sentinel client-reconfig-script <master-name> <script-path>
# sentinel client-reconfig-script master-name /var/redis/reconfig.sh



#* notification-script 와 client-reconfig-script 를 실행중인 변경 금지
sentinel deny-scripts-reconfig yes


############################## rename 반영 ####################################

#* redis 서버에 rename-command가 있는 경우 여기에도 동일하게 작성
#* 그래야 sentinel도 바뀐 명령어에 따른 동작을 할 수 있음
# SENTINEL rename-command master-name CONFIG CONFIG
